#!/usr/bin/env node

/**
 * Module dependencies.
 */
//node开发环境设置
process.env.NODE_ENV = process.env.NODE_ENV || 'development';

var app = require('../app');
var debug = require('debug')('xsd_project:server');
var http = require('http');
var chalk = require('chalk');
var mongoose = require('mongoose');
var config = require('../config');
/**
 * Get port from environment and store in Express.
 */
// MongoDB Connection
var db = mongoose.connect(config.db.uri, config.db.options, function(err) {
  if (err) {
    console.error(chalk.red('Could not connect to MongoDB!'));
    console.log(chalk.red(err));
  }
  console.log(chalk.green("MongoDB connection already ok"));
});
mongoose.connection.on('error', function(err) {
  console.error(chalk.red('MongoDB connection error: ' + err));
  process.exit(-1);
});
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
console.log(chalk.green(' application started'));
console.log(chalk.green(' serv-port---     ' + port));
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}